"""init

Revision ID: cc187ba0f29d
Revises: 
Create Date: 2024-12-12 19:35:32.223349

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cc187ba0f29d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
        sa.Column('uid', sa.UUID(), nullable=False),
        sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('firstname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('lastname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
        sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint('uid')
    )
    # Explicit cast for altering the column type
    op.execute(
        "ALTER TABLE books ALTER COLUMN published_date TYPE DATE USING published_date::date"
    )
    # ### end Alembic commands ###

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('books', 'published_date',
               existing_type=sa.Date(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_table('users')
    # ### end Alembic commands ###
